package day4;

import Utils.AdventUtils;
import java.util.*;

public class ScratchCards {

    private static final String TEST_INPUT_1 = "day4/testInput1.txt";
    private static final String INPUT_1 = "day4/input1.txt";

    Map<Integer,Map.Entry<Set<Integer>, Set<Integer>>> scratchCards = new HashMap<>();

    public ScratchCards(String filename) {
        AdventUtils.parseFileInput(filename, this::populateScratchCards);
    }

    private void populateScratchCards(String line) {
        String[] tokens = line.split(":");
        String tag = tokens[0];
        String setInfo = tokens[1];
        assert tag.startsWith("Card"): "All lines must start with the word card";
        String gameId = tag.replace("Card","");
        scratchCards.put(Integer.parseInt(gameId.trim()), parseSetPairs(setInfo.trim()));
    }

    private Map.Entry<Set<Integer>, Set<Integer>> parseSetPairs(String line) {
        String[] setStrings = line.split("\\|");
        assert setStrings.length == 2: "Set can only have 2 values";
        String[] winningNumbers = setStrings[0].trim().split("\\s+");
        String[] playerNumbers = setStrings[1].trim().split("\\s+");

        return new AbstractMap.SimpleEntry<>(
                new HashSet<>(Arrays.stream(winningNumbers).map(s -> Integer.parseInt(s.trim())).toList()),
                new HashSet<>(Arrays.stream(playerNumbers).map(s -> Integer.parseInt(s.trim())).toList()));

    }

    private static int calculatePointTotal(Map<Integer,Set<Integer>> matchingSets) {
        int total = 0;
        for (var matchingSet: matchingSets.values()) {
            int points = 0;
            if (!matchingSet.isEmpty()) {
                points = 1 << matchingSet.size() - 1;
            }
            total += points;
        }
        return total;
    }

    private static int copyCounter(Map<Integer, Set<Integer>> matchingSets) {
        List<Integer> numberOfMatches = matchingSets.values().stream().mapToInt(Set::size).boxed().toList();
        List<Integer> scratchcardInstancesList = new ArrayList<>();

        for (int i = 0; i < numberOfMatches.size(); i++) {
            //Start at 1 original instance
            int instances = 1;
            // loop over all card instance
            for (int j = 0; j < i; j++) {
                // add {number of instances of a card_j} * {number of copies of card_i generated by card_j (is either 0 or 1 for this question)}
                instances += scratchcardInstancesList.get(j) * ((i - j) <= numberOfMatches.get(j) ? 1 : 0);
            }
            System.out.println("Instances of card " + i + ": " + instances);
            scratchcardInstancesList.add(instances);
        }
        return AdventUtils.findSumOfCollection(scratchcardInstancesList);
    }

    public Map<Integer, Set<Integer>> calculateMatchingSets() {
        Map<Integer, Set<Integer>> matchingSets = new HashMap<>();
        for (var i: scratchCards.keySet()) {
            Set<Integer> matchingSet = new HashSet<>(scratchCards.get(i).getKey());
            matchingSet.retainAll(scratchCards.get(i).getValue());
            System.out.println("Card " + i + " Matching Sets: " + matchingSet);
            matchingSets.put(i, matchingSet);
        }
        return matchingSets;
    }

    public static void main(String[] args) {
        for (String filename: Arrays.asList(TEST_INPUT_1, INPUT_1)) {
            System.out.println(filename + ":");
            ScratchCards scratchCards = new ScratchCards(filename);
            Map<Integer, Set<Integer>> answer = scratchCards.calculateMatchingSets();
            System.out.println("Total game points: " + calculatePointTotal(answer));
            System.out.println("Total number of scratchCards: " + copyCounter(answer));
        }
    }
}
